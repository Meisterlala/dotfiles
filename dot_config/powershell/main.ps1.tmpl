# Disable update check
if ($env:POWERSHELL_UPDATECHECK -ne 'LTS') {
    [System.Environment]::SetEnvironmentVariable('POWERSHELL_UPDATECHECK', 'LTS', 'User')
}

$time = [System.Diagnostics.Stopwatch]::StartNew()
$modulesBase = Join-Path $HOME ".config/powershell/Modules"

# Session-scoped issue collector for optional tooling
if (-not $global:ProfileIssues) { $global:ProfileIssues = @() }
function Add-ProfileIssue {
    param(
        [Parameter(Mandatory)][string]$Name,
        [Parameter(Mandatory)][string]$Message
    )
    $global:ProfileIssues += "${Name}: ${Message}"
}

function Import-Module-Try {
    param(
        [Parameter(Mandatory)][string]$Name
    )
    try {
        Import-Module (Join-Path $modulesBase "$Name/$Name.psm1")
        return $true
    }
    catch {
        Add-ProfileIssue "Could not import module $Name :" $_.Exception.Message
        return $false
    }
}

Import-Module-Try "Core"

### Setup-PSReadline
# Show multi line history (Toggle with F2)
Set-PSReadLineOption -PredictionViewStyle ListView
# Show multi line autocomplete
Set-PSReadLineKeyHandler -Key Tab -Function MenuComplete
# Match with already written command
# Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
# Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward


### Prompt init
if (Import-Module-Try "Prompt") {
    Initialize-PromptTheme
}

# Import modular components if available
if (Test-Path (Join-Path $HOME ".config/powershell/api_keys.ps1")) { . (Join-Path $HOME ".config/powershell/api_keys.ps1") } else { Add-ProfileIssue "api_keys.ps1" "not found" }

if (Import-Module-Try "Zoxide") { Initialize-Zoxide }
if (Import-Module-Try "Completions") { Import-BashCompletionsToPwsh }
Import-Module-Try "Aliases"
Import-Module-Try "Chezmoi" 


# Print timing info
$time.Stop()
Write-Host "Profile loaded $(if ($global:ProfileIssues.Count -gt 0) { "with $($global:ProfileIssues.Count) issues" } else { "successfully" }) in $([math]::Round($time.Elapsed.TotalMilliseconds))ms"

# Print issues if any
if ($global:ProfileIssues.Count -gt 0) {
    $preview = ($global:ProfileIssues | Select-Object -First 4) -join '; '
    Write-Host "Failed: $preview" -ForegroundColor Yellow
}
